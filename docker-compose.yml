
services:
  vault:
    image: hashicorp/vault:1.15.3
    container_name: vault
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    volumes:
      - vault_data:/vault
    restart: always
    networks:
      - internal_backend
      - only_dev

  vault_init: 
    image: alpine:3.18
    depends_on:
      - vault
    # entrypoint: ["/bin/sh", "-c", "/vault/init.sh"]
    # entrypoint: ["/bin/sh", "-c", "chmod +x /vault/init.sh && /vault/init.sh"]
    entrypoint: /bin/sh -c "apk add --no-cache curl && chmod +x /vault/init.sh && /vault/init.sh"
    volumes:
      - ./vault/init.sh:/vault/init.sh
    environment:
      VAULT_ADDR: http://vault:8200
    restart: "no"
    networks:
      - internal_backend
      


  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080" # Traefik dashboard
    
    entryPoints:
      web:
        address: ":80"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    networks:
      - default

  backend:
    build:
        context: "https://github.com/Jefmans/backend.git"
        dockerfile: Dockerfile  # only if Dockerfile is in a subf>    
    command: gunicorn app.main:app -w 4 -k uvicorn.workers.Uvicor>    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`, `/_event`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

    # env_file:
    #   - .env
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: root
    depends_on:
      - vault
      - postgres
      - elasticsearch
    restart: always
    networks:
      - internal_backend
      - default


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    restart: always
    networks:
      - internal_backend
      - only_dev


  portainer_agent:
    image: portainer/agent:latest
    ports:
      - "9001:9001"
    environment:
      AGENT_CLUSTER_ADDR: tasks.portainer_agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes      
    deploy:
      mode: global
    restart: always
    networks:
      - agent_network
      - default
      - internal_backend    



  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mysecretpassword
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    networks:
      - internal_backend



  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8081:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@localhost.com
      PGADMIN_DEFAULT_PASSWORD: supersecure
      PGADMIN_CONFIG_SERVER_MODE: 'True'  # Needed to enable preload
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    restart: always
    networks:
      - default
      - internal_backend    

  # frontend:
  #   build:
  #     context: https://github.com/Jefmans/airbnb_frontend.git
  #     dockerfile: Dockerfile  # optional, only if it's in a custom path
  #   # command: reflex run --frontend-only --port 3000
  #   # command: reflex run --env production --port 3000 --backend disabled
  #   environment:
  #     ES_HOST: http://elasticsearch:9200
  #     # WEBSOCKET_URL: ws://65.109.170.93/_event # or your public domain here
  #   #   REFLEX_HOST: 0.0.0.0
  #   # ports:
  #   #   - "3000:3000"

  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
  #     - "traefik.http.routers.frontend.entrypoints=web"
  #     - "traefik.http.services.frontend.loadbalancer.server.port=80"

  #   depends_on:
  #     - backend
  #   restart: always
  #   networks:
  #     - default
  #     - internal_backend



  reflex-backend:
    build:
      context: https://github.com/Jefmans/reflex.git
      dockerfile: backend.Dockerfile
    networks:
      - internal
    depends_on:
      - postgres
    restart: always

  reflex-frontend:
    build:
      context: https://github.com/Jefmans/reflex.git
      dockerfile: frontend.Dockerfile
    networks:
      - internal
      - traefik-public
    depends_on:
      - reflex-backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.reflex.rule=Host(`65.109.170.93`)"
      - "traefik.http.routers.reflex.entrypoints=web"
      - "traefik.http.services.reflex.loadbalancer.server.port=80"
      - "traefik.docker.network=traefik-public"
    restart: always



volumes:
  pgdata:
  portainer_data:
  vault_data:
  pgadmin_data:


networks:
  agent_network:
  default:
  internal_backend:
    internal: true
  only_dev: