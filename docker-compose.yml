
services:
  vault:
    image: hashicorp/vault:1.15.3
    container_name: vault
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    volumes:
      - vault_data:/vault
    restart: always
    networks:
      - internal_backend
      - only_dev

  vault_init: 
    build:
      context: ./vault
      dockerfile: vault_init.Dockerfile
    depends_on:
      - vault
    environment:
      VAULT_ADDR: http://vault:8200
    restart: "no"
    networks:
      - internal_backend



  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"  # HTTP port
      - "443:443"  # HTTPS port (if you're using SSL)
      - "8080:8080"  # Traefik dashboard (optional)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    networks:
      - traefik_public
      - default
      - app_network

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mysecretpassword
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    depends_on:
      - vault
    networks:
      - internal_backend

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8081:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@localhost.com
      PGADMIN_DEFAULT_PASSWORD: supersecure
      PGADMIN_CONFIG_SERVER_MODE: 'True'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    restart: always
    networks:
      - internal_backend
      - default

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    restart: always
    networks:
      - internal_backend
      - only_dev

  portainer_agent:
    image: portainer/agent:latest
    ports:
      - "9001:9001"
    environment:
      AGENT_CLUSTER_ADDR: tasks.portainer_agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    deploy:
      mode: global
    restart: always
    networks:
      - agent_network
      - default

  backend:
    build:
      context: https://github.com/Jefmans/backend.git
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`, `/_event`, `/_upload`, `/ping`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: root
    depends_on:
      - postgres
      - vault
    restart: always
    networks:
      - internal_backend
      - traefik_public


  angular-app:
    build:
      context: https://github.com/Jefmans/my-angular-app.git
      dockerfile: Dockerfile
    ports:
      - "8080"  # This is used for internal communication between containers, Traefik routes to this
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.angular-app.rule=Host(`your-domain.com`)"  # Replace with your domain
      - "traefik.http.routers.angular-app.rule=Host(`65.109.170.93`)"  # Use your IP address here
      - "traefik.http.services.angular-app.loadbalancer.server.port=80"  # Nginx serves on port 80
    networks:
      - app_network




volumes:
  pgdata:
  vault_data:
  pgadmin_data:

networks:
  agent_network:
  internal_backend:
    internal: true
  only_dev:
  traefik_public:
  app_network:
